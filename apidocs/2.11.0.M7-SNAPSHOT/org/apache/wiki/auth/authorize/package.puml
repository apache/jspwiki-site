@startuml

    namespace org.apache.wiki.auth.authorize {

        class Role [[Role.html]] {
            {static} +ALL: Role
            {static} +ANONYMOUS: Role
            {static} +ASSERTED: Role
            {static} +AUTHENTICATED: Role
            #Role()
            +Role(String)
            {static} +isBuiltInRole(Role): boolean
            {static} +isReservedName(String): boolean
            +getName(): String
        }

        class Group [[Group.html]] {
            #Group(String, String)
            +add(Principal): boolean
            +clear(): void
            +getCreated(): Date
            +getCreator(): String
            +getLastModified(): Date
            +getModifier(): String
            +getName(): String
            +getWiki(): String
            +isMember(Principal): boolean
            +members(): Principal[]
            +remove(Principal): boolean
            +setCreated(Date): void
            +setCreator(String): void
            +setLastModified(Date): void
            +setModifier(String): void
        }

        interface GroupManager [[GroupManager.html]] {
            {static} +MESSAGES_KEY: String
            {static} +PROP_GROUPDATABASE: String
            +parseGroup(Context, boolean): Group
            +fireEvent(int, Object): void
            {abstract} +getGroup(String): Group
            {abstract} +parseGroup(String, String, boolean): Group
            {abstract} +removeGroup(String): void
            {abstract} +setGroup(Session, Group): void
            {abstract} +validateGroup(Context, Group): void
            {abstract} +checkGroupName(Context, String): void
            {abstract} +addWikiEventListener(WikiEventListener): void
            {abstract} +removeWikiEventListener(WikiEventListener): void
        }

        interface WebAuthorizer [[WebAuthorizer.html]] {
            {abstract} +isUserInRole(HttpServletRequest, Principal): boolean
        }

        class JDBCGroupDatabase [[JDBCGroupDatabase.html]] {
            {static} +DEFAULT_GROUPDB_DATASOURCE: String
            {static} +DEFAULT_GROUPDB_TABLE: String
            {static} +DEFAULT_GROUPDB_MEMBER_TABLE: String
            {static} +DEFAULT_GROUPDB_CREATED: String
            {static} +DEFAULT_GROUPDB_CREATOR: String
            {static} +DEFAULT_GROUPDB_NAME: String
            {static} +DEFAULT_GROUPDB_MEMBER: String
            {static} +DEFAULT_GROUPDB_MODIFIED: String
            {static} +DEFAULT_GROUPDB_MODIFIER: String
            {static} +PROP_GROUPDB_DATASOURCE: String
            {static} +PROP_GROUPDB_TABLE: String
            {static} +PROP_GROUPDB_MEMBER_TABLE: String
            {static} +PROP_GROUPDB_CREATED: String
            {static} +PROP_GROUPDB_CREATOR: String
            {static} +PROP_GROUPDB_NAME: String
            {static} +PROP_GROUPDB_MEMBER: String
            {static} +PROP_GROUPDB_MODIFIED: String
            {static} +PROP_GROUPDB_MODIFIER: String
            {static} #log: Logger
            +delete(Group): void
            +groups(): Group[]
            +save(Group, Principal): void
            +initialize(Engine, Properties): void
        }

        interface GroupDatabase [[GroupDatabase.html]] {
            {abstract} +delete(Group): void
            {abstract} +initialize(Engine, Properties): void
            {abstract} +save(Group, Principal): void
            {abstract} +groups(): Group[]
        }

        class XMLGroupDatabase [[XMLGroupDatabase.html]] {
            {static} +PROP_DATABASE: String
            +delete(Group): void
            +groups(): Group[]
            +initialize(Engine, Properties): void
            +save(Group, Principal): void
        }

        class DefaultGroupManager [[DefaultGroupManager.html]] {
            #m_engine: Engine
            +findRole(String): Principal
            +getGroup(String): Group
            +initialize(Engine, Properties): void
            +isUserInRole(Session, Principal): boolean
            +parseGroup(String, String, boolean): Group
            +removeGroup(String): void
            +setGroup(Session, Group): void
            +validateGroup(Context, Group): void
            +checkGroupName(Context, String): void
            #extractMembers(String): String[]
            +addWikiEventListener(WikiEventListener): void
            +removeWikiEventListener(WikiEventListener): void
            +actionPerformed(WikiEvent): void
        }

        class WebContainerAuthorizer [[WebContainerAuthorizer.html]] {
            #m_engine: Engine
            #m_containerAuthorized: boolean
            +initialize(Engine, Properties): void
            +isUserInRole(HttpServletRequest, Principal): boolean
            +isUserInRole(Session, Principal): boolean
            +findRole(String): Principal
            +isConstrained(String, Role): boolean
            +isContainerAuthorized(): boolean
            #getRoles(Document): Role[]
            #getWebXml(): Document
        }

        class org.apache.wiki.auth.authorize.WebContainerAuthorizer.LocalEntityResolver [[WebContainerAuthorizer.LocalEntityResolver.html]] {
            +resolveEntity(String, String): InputSource
        }

        interface java.security.Principal {
            {abstract} +getName(): String
        }
        java.security.Principal <|.. Role

        interface java.io.Serializable
        java.io.Serializable <|.. Role

        interface org.apache.wiki.auth.Authorizer {
            {abstract} +getRoles(): Principal[]
            {abstract} +findRole(String): Principal
            {abstract} +initialize(Engine, Properties): void
            {abstract} +isUserInRole(Session, Principal): boolean
        }
        org.apache.wiki.auth.Authorizer <|.. GroupManager

        interface org.apache.wiki.event.WikiEventListener {
            {abstract} +actionPerformed(WikiEvent): void
        }
        org.apache.wiki.event.WikiEventListener <|.. GroupManager

        org.apache.wiki.auth.Authorizer <|.. WebAuthorizer

        GroupDatabase <|.. JDBCGroupDatabase

        GroupDatabase <|.. XMLGroupDatabase

        GroupManager <|.. DefaultGroupManager

        org.apache.wiki.auth.Authorizer <|.. DefaultGroupManager

        org.apache.wiki.event.WikiEventListener <|.. DefaultGroupManager

        WebAuthorizer <|.. WebContainerAuthorizer

        interface org.xml.sax.EntityResolver {
            {abstract} +resolveEntity(String, String): InputSource
        }
        org.xml.sax.EntityResolver <|.. org.apache.wiki.auth.authorize.WebContainerAuthorizer.LocalEntityResolver

        WebContainerAuthorizer +-- org.apache.wiki.auth.authorize.WebContainerAuthorizer.LocalEntityResolver

        Group --> java.security.Principal: principal

        GroupManager --> GroupDatabase: groupDatabase

        DefaultGroupManager --> org.apache.wiki.event.WikiEventListener: m_groupListener

        DefaultGroupManager --> GroupDatabase: groupDatabase

        DefaultGroupManager --> "*" java.security.Principal: roles

        WebContainerAuthorizer --> "*" Role: m_containerRoles

        WebContainerAuthorizer --> "*" java.security.Principal: roles

    }


    center footer UMLDoclet 1.1.4, PlantUML 1.2019.05
@enduml
