@startuml

    namespace org.apache.wiki.workflow {

        abstract class AbstractStep [[AbstractStep.html]] {
            #AbstractStep(String)
            +AbstractStep(Workflow, String)
            +addSuccessor(Outcome, Step): void
            +getErrors(): List<String>
            +getEndTime(): Date
            +getMessageKey(): String
            +getStartTime(): Date
            +isCompleted(): boolean
            +isStarted(): boolean
            +start(): void
            +getSuccessor(Outcome): Step
            #addError(String): void
            {abstract} +execute(): Outcome
        }

        abstract class Task [[Task.html]] {
            +Task(String)
            +Task(Workflow, String)
        }

        abstract class Decision [[Decision.html]] {
            +Decision(Workflow, String, Principal, Outcome)
            +addFact(Fact): void
            +decide(Outcome): void
            +execute(): Outcome
            +getId(): int
            +isReassignable(): boolean
            +reassign(Principal): void
            +setId(int): void
        }

        class SimpleDecision [[SimpleDecision.html]] {
            +SimpleDecision(Workflow, String, Principal)
        }

        class DecisionQueue [[DecisionQueue.html]] {
            #add(Decision): void
            #decisions(): Decision[]
            #remove(Decision): void
            +getActorDecisions(Session): Collection<Decision>
            +decide(Decision, Outcome): void
            +reassign(Decision, Principal): void
        }

        class DefaultWorkflowManager [[DefaultWorkflowManager.html]] {
            +start(Workflow): void
            +initialize(Engine, Properties): void
            +requiresApproval(String): boolean
            +getApprover(String): Principal
            #getEngine(): Engine
            +getOwnerWorkflows(Session): List<Workflow>
            +actionPerformed(WikiEvent): void
            #add(Workflow): void
            #remove(Workflow): void
        }

        class WorkflowBuilder [[WorkflowBuilder.html]] {
            {static} +getBuilder(Engine): WorkflowBuilder
            +buildApprovalWorkflow(Principal, String, Step, String, Fact[], Step, String): Workflow
        }

        interface WorkflowManager [[WorkflowManager.html]] {
            {static} +WF_WP_SAVE_ATTR_PRESAVE_WIKI_CONTEXT: String
            {static} +WF_WP_SAVE_APPROVER: String
            {static} +WF_WP_SAVE_DECISION_MESSAGE_KEY: String
            {static} +WF_WP_SAVE_REJECT_MESSAGE_KEY: String
            {static} +WF_WP_SAVE_FACT_PAGE_NAME: String
            {static} +WF_WP_SAVE_FACT_DIFF_TEXT: String
            {static} +WF_WP_SAVE_FACT_CURRENT_TEXT: String
            {static} +WF_WP_SAVE_FACT_PROPOSED_TEXT: String
            {static} +WF_WP_SAVE_FACT_IS_AUTHENTICATED: String
            {static} +WF_UP_CREATE_SAVE_ATTR_SAVED_PROFILE: String
            {static} +WF_UP_CREATE_SAVE_APPROVER: String
            {static} +WF_UP_CREATE_SAVE_DECISION_MESSAGE_KEY: String
            {static} +WF_UP_CREATE_SAVE_FACT_SUBMITTER: String
            {static} +WF_UP_CREATE_SAVE_FACT_PREFS_LOGIN_NAME: String
            {static} +WF_UP_CREATE_SAVE_FACT_PREFS_FULL_NAME: String
            {static} +WF_UP_CREATE_SAVE_FACT_PREFS_EMAIL: String
            {static} +PROPERTY_APPROVER_PREFIX: String
            {abstract} +start(Workflow): void
            {abstract} +requiresApproval(String): boolean
            {abstract} +getApprover(String): Principal
            {abstract} +getOwnerWorkflows(Session): List<Workflow>
        }

        class Outcome [[Outcome.html]] {
            {static} +STEP_COMPLETE: Outcome
            {static} +STEP_ABORT: Outcome
            {static} +STEP_CONTINUE: Outcome
            {static} +DECISION_ACKNOWLEDGE: Outcome
            {static} +DECISION_APPROVE: Outcome
            {static} +DECISION_DENY: Outcome
            {static} +DECISION_HOLD: Outcome
            {static} +DECISION_REASSIGN: Outcome
            +isCompletion(): boolean
            +getMessageKey(): String
            {static} +forName(String): Outcome
        }

        class SystemPrincipal [[SystemPrincipal.html]] {
            {static} +SYSTEM_USER: Principal
            +getName(): String
        }

        class Workflow [[Workflow.html]] {
            {static} +TIME_NOT_SET: Date
            {static} +ID_NOT_SET: int
            {static} +COMPLETED: int
            {static} +ABORTED: int
            {static} +WAITING: int
            {static} +RUNNING: int
            {static} +CREATED: int
            +Workflow(String, Principal)
            +abort(): void
            +addMessageArgument(Serializable): void
            +getCurrentState(): int
            +getAttribute(String): Object
            +getEndTime(): Date
            +getId(): int
            +getMessageKey(): String
            +getStartTime(): Date
            +isAborted(): boolean
            +isCompleted(): boolean
            +isStarted(): boolean
            +restart(): void
            +setAttribute(String, Object): void
            +setId(int): void
            +start(): void
            +waitstate(): void
            #cleanup(): void
            #complete(): void
            #previousStep(Step): Step
            #processCurrentStep(): void
            +addWikiEventListener(WikiEventListener): void
            +removeWikiEventListener(WikiEventListener): void
            #fireEvent(int): void
        }

        class NoSuchOutcomeException [[NoSuchOutcomeException.html]] {
            +NoSuchOutcomeException(String)
        }

        interface Step [[Step.html]] {
            {abstract} +addSuccessor(Outcome, Step): void
            {abstract} +getErrors(): List<String>
            {abstract} +execute(): Outcome
            {abstract} +getEndTime(): Date
            {abstract} +getMessageKey(): String
            {abstract} +getStartTime(): Date
            {abstract} +isCompleted(): boolean
            {abstract} +isStarted(): boolean
            {abstract} +start(): void
            {abstract} +getSuccessor(Outcome): Step
        }

        class Fact [[Fact.html]] {
            +Fact(String, Serializable)
            +getMessageKey(): String
        }

        class DecisionRequiredException [[DecisionRequiredException.html]] {
            +DecisionRequiredException(String)
        }

        class SimpleNotification [[SimpleNotification.html]] {
            +SimpleNotification(Workflow, String, Principal)
            +acknowledge(): void
            +isReassignable(): boolean
        }

        Step <|.. AbstractStep

        AbstractStep <|-- Task

        AbstractStep <|-- Decision

        Decision <|-- SimpleDecision

        interface java.io.Serializable
        java.io.Serializable <|.. DecisionQueue

        WorkflowManager <|.. DefaultWorkflowManager

        interface org.apache.wiki.event.WikiEventListener {
            {abstract} +actionPerformed(WikiEvent): void
        }
        org.apache.wiki.event.WikiEventListener <|.. WorkflowManager

        interface org.apache.wiki.api.engine.Initializable {
            {abstract} +initialize(Engine, Properties): void
        }
        org.apache.wiki.api.engine.Initializable <|.. WorkflowManager

        java.io.Serializable <|.. Outcome

        interface java.security.Principal {
            {abstract} +getName(): String
        }
        java.security.Principal <|.. SystemPrincipal

        java.io.Serializable <|.. Workflow

        class org.apache.wiki.api.exceptions.WikiException
        org.apache.wiki.api.exceptions.WikiException <|-- NoSuchOutcomeException

        java.io.Serializable <|.. Step

        java.io.Serializable <|.. Fact

        org.apache.wiki.api.exceptions.WikiException <|-- DecisionRequiredException

        Decision <|-- SimpleNotification

        AbstractStep --> "*" Outcome: availableOutcomes

        AbstractStep --> "*" java.io.Serializable: messageArguments

        AbstractStep --> Outcome: outcome

        AbstractStep --> java.security.Principal: owner\nactor

        AbstractStep --> Workflow: workflow

        Task --> java.security.Principal: actor

        Task --> Step: successor

        Decision --> java.security.Principal: actor

        Decision --> Outcome: defaultOutcome

        Decision --> "*" Fact: facts

        DefaultWorkflowManager --> "*" Workflow: workflows\ncompletedWorkflows

        DefaultWorkflowManager --> DecisionQueue: decisionQueue

        WorkflowManager --> "*" Workflow: workflows\ncompletedWorkflows

        WorkflowManager --> DecisionQueue: decisionQueue

        Workflow --> java.security.Principal: currentActor\nowner

        Workflow --> Step: currentStep\npreviousStep\nfirstStep

        Workflow --> "*" java.io.Serializable: messageArguments

        Workflow --> WorkflowManager: workflowManager

        Workflow --> "*" Step: history

        Step --> "*" Outcome: availableOutcomes

        Step --> java.security.Principal: actor\nowner

        Step --> "*" java.io.Serializable: messageArguments

        Step --> Outcome: outcome

        Step --> Workflow: workflow

        Fact --> java.io.Serializable: value

    }


    center footer UMLDoclet 1.1.4, PlantUML 1.2019.05
@enduml
