@startuml

    namespace org.apache.wiki.auth {

        class WikiSecurityException [[WikiSecurityException.html]] {
            +WikiSecurityException(String)
            +WikiSecurityException(String, Throwable)
        }

        class DefaultUserManager [[DefaultUserManager.html]] {
            +initialize(Engine, Properties): void
            +getUserDatabase(): UserDatabase
            +getUserProfile(Session): UserProfile
            +setUserProfile(Session, UserProfile): void
            +startUserProfileCreationWorkflow(Session, UserProfile): void
            +parseProfile(Context): UserProfile
            +validateProfile(Context, UserProfile): void
            +listWikiNames(): Principal[]
            +addWikiEventListener(WikiEventListener): void
            +removeWikiEventListener(WikiEventListener): void
        }

        class org.apache.wiki.auth.DefaultUserManager.JSONUserModule [[DefaultUserManager.JSONUserModule.html]] {
            +JSONUserModule(DefaultUserManager)
            +getServletMapping(): String
            +service(HttpServletRequest, HttpServletResponse, String, List<String>): void
            +getUserInfo(String): UserProfile
        }

        class SessionMonitor [[SessionMonitor.html]] {
            +SessionMonitor()
            {static} +getInstance(Engine): SessionMonitor
            +find(HttpSession): Session
            +remove(HttpServletRequest): void
            +remove(HttpSession): void
            +sessions(): int
            +userPrincipals(): Principal[]
            +addWikiEventListener(WikiEventListener): void
            +removeWikiEventListener(WikiEventListener): void
            #fireEvent(int, Principal, Session): void
            +sessionCreated(HttpSessionEvent): void
            +sessionDestroyed(HttpSessionEvent): void
        }

        class NoSuchPrincipalException [[NoSuchPrincipalException.html]] {
            +NoSuchPrincipalException(String)
        }

        interface Authorizer [[Authorizer.html]] {
            {abstract} +findRole(String): Principal
            {abstract} +initialize(Engine, Properties): void
            {abstract} +isUserInRole(Session, Principal): boolean
        }

        class DefaultAuthorizationManager [[DefaultAuthorizationManager.html]] {
            +checkPermission(Session, Permission): boolean
            +hasRoleOrPrincipal(Session, Principal): boolean
            +hasAccess(Context, HttpServletResponse, boolean): boolean
            +initialize(Engine, Properties): void
            +allowedByLocalPolicy(Principal[], Permission): boolean
            +checkStaticPermission(Session, Permission): boolean
            +resolvePrincipal(String): Principal
            +addWikiEventListener(WikiEventListener): void
            +removeWikiEventListener(WikiEventListener): void
        }

        class GroupPrincipal [[GroupPrincipal.html]] {
            +GroupPrincipal(String)
            +getName(): String
        }

        interface UserManager [[UserManager.html]] {
            {static} +PROP_DATABASE: String
            {static} +JSON_USERS: String
            +fireEvent(int, Session, Object): void
            {abstract} +getUserDatabase(): UserDatabase
            {abstract} +getUserProfile(Session): UserProfile
            {abstract} +setUserProfile(Session, UserProfile): void
            {abstract} +startUserProfileCreationWorkflow(Session, UserProfile): void
            {abstract} +parseProfile(Context): UserProfile
            {abstract} +validateProfile(Context, UserProfile): void
            {abstract} +listWikiNames(): Principal[]
            {abstract} +addWikiEventListener(WikiEventListener): void
            {abstract} +removeWikiEventListener(WikiEventListener): void
        }

        interface AuthenticationManager [[AuthenticationManager.html]] {
            {static} +PROP_STOREIPADDRESS: String
            {static} +PROP_ALLOW_COOKIE_AUTH: String
            {static} +PROP_LOGIN_THROTTLING: String
            {static} +PREFIX_LOGIN_MODULE_OPTIONS: String
            {static} +PROP_ALLOW_COOKIE_ASSERTIONS: String
            {static} +PROP_LOGIN_MODULE: String
            {static} +isRolePrincipal(Principal): boolean
            {static} +isUserPrincipal(Principal): boolean
            +getLoginPrincipal(Set<Principal>): Principal
            +fireEvent(int, Principal, Object): void
            {abstract} +isContainerAuthenticated(): boolean
            {abstract} +login(HttpServletRequest): boolean
            {abstract} +login(Session, HttpServletRequest, String, String): boolean
            {abstract} +logout(HttpServletRequest): void
            {abstract} +allowsCookieAssertions(): boolean
            {abstract} +allowsCookieAuthentication(): boolean
            {abstract} +doJAASLogin(Class<?>, CallbackHandler, Map<String, String>): Set<Principal>
            {abstract} +addWikiEventListener(WikiEventListener): void
            {abstract} +removeWikiEventListener(WikiEventListener): void
        }

        interface AuthorizationManager [[AuthorizationManager.html]] {
            {static} +DEFAULT_AUTHORIZER: String
            {static} +POLICY: String
            {static} +DEFAULT_POLICY: String
            {static} +PROP_AUTHORIZER: String
            +isUserInRole(Session, Principal): boolean
            +hasAccess(Context, HttpServletResponse): boolean
            +fireEvent(int, Principal, Object): void
            {abstract} +checkPermission(Session, Permission): boolean
            {abstract} +hasRoleOrPrincipal(Session, Principal): boolean
            {abstract} +hasAccess(Context, HttpServletResponse, boolean): boolean
            {abstract} +allowedByLocalPolicy(Principal[], Permission): boolean
            {abstract} +checkStaticPermission(Session, Permission): boolean
            {abstract} +resolvePrincipal(String): Principal
            {abstract} +addWikiEventListener(WikiEventListener): void
            {abstract} +removeWikiEventListener(WikiEventListener): void
        }

        class SecurityVerifier [[SecurityVerifier.html]] {
            {static} +ERROR: String
            {static} +WARNING: String
            {static} +INFO: String
            {static} +ERROR_POLICY: String
            {static} +WARNING_POLICY: String
            {static} +INFO_POLICY: String
            {static} +ERROR_JAAS: String
            {static} +WARNING_JAAS: String
            {static} +ERROR_ROLES: String
            {static} +INFO_ROLES: String
            {static} +ERROR_DB: String
            {static} +WARNING_DB: String
            {static} +INFO_DB: String
            {static} +ERROR_GROUPS: String
            {static} +WARNING_GROUPS: String
            {static} +INFO_GROUPS: String
            {static} +INFO_JAAS: String
            +SecurityVerifier(Engine, Session)
            +policyPrincipals(): Principal[]
            +policyRoleTable(): String
            +containerRoleTable(): String
            +isSecurityPolicyConfigured(): boolean
            +webContainerRoles(): Principal[]
            #verifyPolicyAndContainerRoles(): void
            #verifyGroupDatabase(): void
            #verifyJaas(): void
            #getFileFromProperty(String): File
            #verifyPolicy(): void
            #verifyStaticPermission(Principal, Permission): boolean
            #verifyUserDatabase(): void
        }

        class DefaultAuthenticationManager [[DefaultAuthenticationManager.html]] {
            {static} #EMPTY_MAP: Map<String, String>
            #m_loginModuleClass: Class<?>
            #m_loginModuleOptions: Map<String, String>
            +initialize(Engine, Properties): void
            +isContainerAuthenticated(): boolean
            +login(HttpServletRequest): boolean
            +login(Session, HttpServletRequest, String, String): boolean
            +logout(HttpServletRequest): void
            +allowsCookieAssertions(): boolean
            +allowsCookieAuthentication(): boolean
            +doJAASLogin(Class<?>, CallbackHandler, Map<String, String>): Set<Principal>
            +addWikiEventListener(WikiEventListener): void
            +removeWikiEventListener(WikiEventListener): void
        }

        class WikiPrincipal [[WikiPrincipal.html]] {
            {static} +GUEST: Principal
            {static} +FULL_NAME: String
            {static} +LOGIN_NAME: String
            {static} +WIKI_NAME: String
            {static} +UNSPECIFIED: String
            {static} +COMPARATOR: Comparator<Principal>
            #WikiPrincipal()
            +WikiPrincipal(String)
            +WikiPrincipal(String, String)
            +getName(): String
            +getType(): String
            +compareTo(Principal): int
        }

        class org.apache.wiki.api.exceptions.WikiException
        org.apache.wiki.api.exceptions.WikiException <|-- WikiSecurityException

        UserManager <|.. DefaultUserManager

        interface org.apache.wiki.ajax.WikiAjaxServlet {
            {abstract} +getServletMapping(): String
            {abstract} +service(HttpServletRequest, HttpServletResponse, String, List<String>): void
        }
        org.apache.wiki.ajax.WikiAjaxServlet <|.. org.apache.wiki.auth.DefaultUserManager.JSONUserModule

        DefaultUserManager +-- org.apache.wiki.auth.DefaultUserManager.JSONUserModule

        interface javax.servlet.http.HttpSessionListener {
            {abstract} +sessionCreated(HttpSessionEvent): void
            {abstract} +sessionDestroyed(HttpSessionEvent): void
        }
        javax.servlet.http.HttpSessionListener <|.. SessionMonitor

        WikiSecurityException <|-- NoSuchPrincipalException

        AuthorizationManager <|.. DefaultAuthorizationManager

        interface java.security.Principal {
            {abstract} +getName(): String
        }
        java.security.Principal <|.. GroupPrincipal

        interface org.apache.wiki.api.engine.Initializable {
            {abstract} +initialize(Engine, Properties): void
        }
        org.apache.wiki.api.engine.Initializable <|.. UserManager

        org.apache.wiki.api.engine.Initializable <|.. AuthenticationManager

        org.apache.wiki.api.engine.Initializable <|.. AuthorizationManager

        AuthenticationManager <|.. DefaultAuthenticationManager

        java.security.Principal <|.. WikiPrincipal

        interface java.lang.Comparable<T> {
            {abstract} +compareTo(T): int
        }
        java.lang.Comparable <|.. WikiPrincipal

        interface java.io.Serializable
        java.io.Serializable <|.. WikiPrincipal

        Authorizer --> "*" java.security.Principal: roles

        DefaultAuthorizationManager --> Authorizer: authorizer

        AuthorizationManager --> Authorizer: authorizer

    }


    center footer UMLDoclet 1.1.4, PlantUML 1.2019.05
@enduml
