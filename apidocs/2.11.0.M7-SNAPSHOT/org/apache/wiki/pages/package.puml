@startuml

    namespace org.apache.wiki.pages {

        interface Page [[Page.html]] {
            {static} +withUrl(String): PageBuilder
            {static} +baseUrl(): String
            {static} +download(String): File
            +title(): String
            +url(): String
            {abstract} +wikiTitle(): String
            {abstract} +wikiPageContent(): String
        }

        class PageBuilder [[PageBuilder.html]] {
            +openAs(T): T
        }

        interface PageManager [[PageManager.html]] {
            {static} +PROP_PAGEPROVIDER: String
            {static} +PROP_USECACHE: String
            {static} +PROP_LOCKEXPIRY: String
            +getPureText(WikiPage): String
            +getText(String): String
            +getText(WikiPage): String
            +pageExists(WikiPage): boolean
            +wikiPageExists(WikiPage): boolean
            {abstract} +getProvider(): WikiPageProvider
            {abstract} +getAllPages(): Collection<WikiPage>
            {abstract} +getPageText(String, int): String
            {abstract} +getPureText(String, int): String
            {abstract} +getText(String, int): String
            {abstract} +saveText(WikiContext, String): void
            {abstract} +putPageText(WikiPage, String): void
            {abstract} +lockPage(WikiPage, String): PageLock
            {abstract} +unlockPage(PageLock): void
            {abstract} +getCurrentLock(WikiPage): PageLock
            {abstract} +getPage(String): WikiPage
            {abstract} +getPage(String, int): WikiPage
            {abstract} +getPageInfo(String, int): WikiPage
            {abstract} +getVersionHistory(String): List<T>
            {abstract} +getCurrentProvider(): String
            {abstract} +getProviderDescription(): String
            {abstract} +getTotalPageCount(): int
            {abstract} +getRecentChanges(): Set<WikiPage>
            {abstract} +pageExists(String): boolean
            {abstract} +pageExists(String, int): boolean
            {abstract} +wikiPageExists(String): boolean
            {abstract} +wikiPageExists(String, int): boolean
            {abstract} +deleteVersion(WikiPage): void
            {abstract} +deletePage(String): void
            {abstract} +deletePage(WikiPage): void
        }

        class PageLock [[PageLock.html]] {
            +PageLock(WikiPage, String, Date, Date)
            +getPage(): String
            +getLocker(): String
            +getAcquisitionTime(): Date
            +getExpiryTime(): Date
            +getTimeLeft(): long
            +isExpired(): boolean
        }

        class DefaultPageManager [[DefaultPageManager.html]] {
            #m_pageLocks: ConcurrentHashMap<String, PageLock>
            +DefaultPageManager(Engine, Properties)
            +getProvider(): WikiPageProvider
            +getAllPages(): Collection<WikiPage>
            +getPageText(String, int): String
            +getPureText(String, int): String
            +getText(String, int): String
            +saveText(WikiContext, String): void
            #getEngine(): Engine
            +putPageText(WikiPage, String): void
            +lockPage(WikiPage, String): PageLock
            +unlockPage(PageLock): void
            +getCurrentLock(WikiPage): PageLock
            +getPage(String): WikiPage
            +getPage(String, int): WikiPage
            +getPageInfo(String, int): WikiPage
            +getVersionHistory(String): List<T>
            +getCurrentProvider(): String
            +getProviderDescription(): String
            +getTotalPageCount(): int
            +getRecentChanges(): Set<WikiPage>
            +pageExists(String): boolean
            +pageExists(String, int): boolean
            +wikiPageExists(String): boolean
            +wikiPageExists(String, int): boolean
            +deleteVersion(WikiPage): void
            +deletePage(String): void
            +deletePage(WikiPage): void
            #fireEvent(int, String): void
            +modules(): Collection<WikiModuleInfo>
            +getModuleInfo(String): WikiModuleInfo
            +actionPerformed(WikiEvent): void
            #changeAcl(WikiPage, Principal[], Principal): boolean
        }

        class PageSorter [[PageSorter.html]] {
            {static} #PROP_PAGE_NAME_COMPARATOR: String
            +PageSorter()
            +PageSorter(Comparator<String>)
            +compare(String, String): int
            +initialize(Properties): void
            +sort(List<String>): void
            +sort(String[]): void
        }

        class PageTimeComparator [[PageTimeComparator.html]] {
            +compare(WikiPage, WikiPage): int
        }

        interface org.apache.wiki.event.WikiEventListener {
            {abstract} +actionPerformed(WikiEvent): void
        }
        org.apache.wiki.event.WikiEventListener <|.. PageManager

        interface java.io.Serializable
        java.io.Serializable <|.. PageLock

        abstract class org.apache.wiki.modules.ModuleManager {
            {abstract} +modules(): Collection<WikiModuleInfo>
            {abstract} +getModuleInfo(String): WikiModuleInfo
        }
        org.apache.wiki.modules.ModuleManager <|-- DefaultPageManager

        PageManager <|.. DefaultPageManager

        interface java.util.Comparator<T> {
            {abstract} +compare(T, T): int
        }
        java.util.Comparator <|.. PageSorter

        java.util.Comparator <|.. PageTimeComparator

        java.io.Serializable <|.. PageTimeComparator

        PageManager --> "*" PageLock: activeLocks

        PageManager --> PageSorter: pageSorter

        DefaultPageManager --> "*" PageLock: activeLocks

        DefaultPageManager --> PageSorter: pageSorter

    }


    center footer UMLDoclet 1.1.4, PlantUML 1.2019.05
@enduml
