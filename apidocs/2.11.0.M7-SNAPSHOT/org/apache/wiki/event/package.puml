@startuml

    namespace org.apache.wiki.event {

        class WikiEventManager [[WikiEventManager.html]] {
            {static} +getInstance(): WikiEventManager
            {static} +addWikiEventListener(Object, WikiEventListener): boolean
            {static} +removeWikiEventListener(Object, WikiEventListener): boolean
            {static} +getWikiEventListeners(Object): Set<WikiEventListener>
            {static} +removeWikiEventListener(WikiEventListener): boolean
            {static} +isListening(Object): boolean
            {static} +fireEvent(Object, WikiEvent): void
        }

        class WorkflowEvent [[WorkflowEvent.html]] {
            {static} +CREATED: int
            {static} +STARTED: int
            {static} +RUNNING: int
            {static} +WAITING: int
            {static} +COMPLETED: int
            {static} +ABORTED: int
            {static} +DQ_ADDITION: int
            {static} +DQ_REMOVAL: int
            {static} +DQ_DECIDE: int
            {static} +DQ_REASSIGN: int
            +WorkflowEvent(Object, int)
            +eventName(int): String
        }

        class WikiEngineEvent [[WikiEngineEvent.html]] {
            {static} +INITIALIZING: int
            {static} +INITIALIZED: int
            {static} +SHUTDOWN: int
            {static} +STOPPED: int
            +WikiEngineEvent(Object, int)
            #setType(int): void
            {static} +isValidType(int): boolean
            +eventName(): String
            +getTypeDescription(): String
        }

        interface WikiEventListener [[WikiEventListener.html]] {
            {abstract} +actionPerformed(WikiEvent): void
        }

        abstract class WikiEvent [[WikiEvent.html]] {
            {static} +ERROR: int
            {static} +UNDEFINED: int
            +WikiEvent(Object, int)
            +getSrc(): T
            +getWhen(): long
            #setType(int): void
            +getType(): int
            +getTypeDescription(): String
            {static} +isValidType(int): boolean
            +eventName(): String
        }

        class WikiSecurityEvent [[WikiSecurityEvent.html]] {
            {static} +LOGIN_INITIATED: int
            {static} +LOGIN_ANONYMOUS: int
            {static} +LOGIN_ASSERTED: int
            {static} +LOGIN_AUTHENTICATED: int
            {static} +LOGIN_ACCOUNT_EXPIRED: int
            {static} +LOGIN_CREDENTIAL_EXPIRED: int
            {static} +LOGIN_FAILED: int
            {static} +LOGOUT: int
            {static} +PRINCIPAL_ADD: int
            {static} +SESSION_EXPIRED: int
            {static} +GROUP_ADD: int
            {static} +GROUP_REMOVE: int
            {static} +GROUP_CLEAR_GROUPS: int
            {static} +ACCESS_ALLOWED: int
            {static} +ACCESS_DENIED: int
            {static} +PROFILE_SAVE: int
            {static} +PROFILE_NAME_CHANGED: int
            {static} #log: Logger
            +WikiSecurityEvent(Object, int, Principal, Object)
            +WikiSecurityEvent(Object, int, Object)
            +getPrincipal(): Object
            +getTarget(): Object
            +eventName(int): String
            +getTypeDescription(): String
        }

        class WikiPageEvent [[WikiPageEvent.html]] {
            {static} +PAGE_LOCK: int
            {static} +PAGE_UNLOCK: int
            {static} +PRE_TRANSLATE_BEGIN: int
            {static} +PRE_TRANSLATE: int
            {static} +PRE_TRANSLATE_END: int
            {static} +POST_TRANSLATE_BEGIN: int
            {static} +POST_TRANSLATE: int
            {static} +POST_TRANSLATE_END: int
            {static} +PRE_SAVE_BEGIN: int
            {static} +PRE_SAVE: int
            {static} +PRE_SAVE_END: int
            {static} +POST_SAVE_BEGIN: int
            {static} +POST_SAVE: int
            {static} +POST_SAVE_END: int
            {static} +PAGE_REQUESTED: int
            {static} +PAGE_DELIVERED: int
            {static} +PAGE_DELETE_REQUEST: int
            {static} +PAGE_DELETED: int
            {static} +PAGE_REINDEX: int
            +WikiPageEvent(Object, int, String)
            +getPageName(): String
            {static} +isValidType(int): boolean
            +eventName(): String
            +getTypeDescription(): String
        }

        enum WikiEventEmitter [[WikiEventEmitter.html]] {
            {static} +INSTANCE
            {static} +get(): WikiEventEmitter
            {static} +fireWorkflowEvent(Object, int): WorkflowEvent
            {static} +attach(WikiEventListener): void
            {static} +register(WikiEventListener): void
        }

        class WikiPageRenameEvent [[WikiPageRenameEvent.html]] {
            {static} +PAGE_RENAMED: int
            +WikiPageRenameEvent(Object, String, String)
            +getOldPageName(): String
            +getNewPageName(): String
            {static} +isValidType(int): boolean
            +eventName(): String
            +getTypeDescription(): String
        }

        WikiEvent <|-- WorkflowEvent

        WikiEvent <|-- WikiEngineEvent

        interface java.util.EventListener
        java.util.EventListener <|.. WikiEventListener

        class java.util.EventObject
        java.util.EventObject <|-- WikiEvent

        WikiEvent <|-- WikiSecurityEvent

        WikiEvent <|-- WikiPageEvent

        WikiPageEvent <|-- WikiPageRenameEvent

    }


    center footer UMLDoclet 1.1.4, PlantUML 1.2019.05
@enduml
